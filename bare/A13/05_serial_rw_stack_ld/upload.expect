#!/usr/bin/expect
#
# expect is a tcl based system to automate interaction
# with command line programs and ui. We are using this
# tool to automatically upload files to our board.
# 
# we assume:
# *u-boot is already installed on the device
# *picocom and sz are already present on the local 
# file system.
#
# It works the following way:
# * We connect to the board using picocom
# * We try to get a u-boot promp. We press enter and look for the prompt.
#   If we can't find the prompt we request the user to reset his board 
#   and we 
#   press enter at the u-boot count-down.
# * After that we tell u-boot we are going to send a file over ymodem.
# * u-boot is now waiting for the file to be sent and we instruct picocom
#   to start uploading the given file
# * once the file is loaded we issue the go command to start and execute
#   the program we just uploaded.
# * The last step is to interact where the use can enter command over the
#   serial (exit with control-a control-x)
#

set serial_dev "/dev/ttyUSB0"
set load_address "0x4B000000"
set file "uart.bin"

#
# Parse command line arguments
# --serial serial_dev
# --load_address load_address
# --file file
#
if { $argc > 0 } {
	set counter 0
	while {$counter < $argc} {
		if { [lindex $argv $counter] == "--serial" }  {
			set counter [expr {$counter +1}]
			set serial_dev [lindex $argv $counter]
			
		}
		if { [lindex $argv $counter] == "--load_address" }  {
			set counter [expr {$counter +1}]
			set load_address [lindex $argv $counter]
			
		}
		if { [lindex $argv $counter] == "--file" }  {
			set counter [expr {$counter +1}]
			set file [lindex $argv $counter]
			
		}
		set counter [expr {$counter +1}]
	}
}

puts "serial: $serial_dev, load_address: $load_address, file: $file\n"

#
# start picocom at 115200 baud rate and tell it to use 
# "sx" as program to send files across
#
spawn picocom -b 115200 $serial_dev

proc request_reset {} {
	puts "Please press reset on the board\n"

	set timeout 10
	expect {
		"Hit any key to stop autoboot" {
			send "\n"
		}
		timeout {
			puts "timeout waiting for reset\n"
			exit 1
		}
	}
}

#
# First wait for picocom to be ready
#
expect {
	"Terminal ready"
}

set timeout 1
send "\n"
expect {
	"sun5i#" {
	}
	timeout {
		request_reset
	}
}
set timeout 1
send "\n"
expect {
	"sun5i#" {
	}
}


send "loady $load_address\n"
expect {
#	"Ready for binary (ymodem) download"
	"C"
}
#
# Send control-a control-s to picocom. This is the way to upload files
# when using picocom 
# the sequence bellow was that represents control-a control-s was 
# determined by doing running od -c as described here:
#
#   http://expect.sourceforge.net/FAQ.html#q54
#
send "\001\023" 

#
# Once picocom recieves the control chars it requests input from
# the user by prompting him to enter a file
#
expect {
	"*** file:"
}

#
# We a going to enter the file name and let picocom launch sz to
# perform the upload over ymodem.
#
# We exptected to be able to send "\n" here but this is not the case.
# Checking the source code of picocom (apt-get source picocom )
# revealed we needed to send \r
#
send  "$file\r"

set timeout 60
expect {
	"sun5i#" {
	}
	timeout {
		puts "\nSomething whent wrong while uploading\n"
		exit 1
	}
}
send "go $load_address\n"

#
# now just let the use interact over the serial
#
interact
